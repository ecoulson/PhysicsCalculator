import { SyntaxTree } from "../SyntaxTree/SyntaxTree";
import { SyntaxNode } from "../SyntaxTree/SyntaxNode";
import { WorkSpace } from "../../WorkSpace/WorkSpace";
export declare class EvaluationTree {
    root: SyntaxNode;
    private base10Exp;
    unitRoot: SyntaxNode;
    private workspace;
    constructor(tree: SyntaxTree, workspace: WorkSpace);
    private buildUnitTree;
    private buildUnitTreeHelper;
    private convertToSIUnits;
    private shouldRaiseSubtree;
    private raiseLeftUnitBy;
    private getBase10Exponent;
    private getBase10Conversion;
    private getPrefix;
    private convertToBaseUnit;
    private getBaseUnit;
    evaluate(): string;
    evaluateValue(): number;
    private evaluateValueHelper;
    evaluateUnits(): string;
    private evaluateUnitsHelper;
    private isDimensionsEqual;
    private indexOfDimension;
    private removeCanceledUnits;
    private simplifyUnits;
    private getCombinationWithLeastBaseUnits;
    private getAllSimplifications;
    private combineLikeTerms;
    private removeEquivalentCombinations;
    private getAllSimplificationsHelper;
    private getSimplifications;
    private canSimplify;
    private getFullCombination;
    private copyBaseDimensions;
    private isOppositeSigns;
    private simplify;
    private getShortestCombinations;
    private getSmallestArraySize;
    private removeDimensionlessUnits;
    private sortUnitsByMagnitude;
    private hasDimensionlessUnits;
    private removeDimensionlessUnitsFromNumerator;
    private createDimensionArray;
    private getDimensionsString;
}
